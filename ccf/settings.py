"""
Django settings for ccf project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys

from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.environ.get('DJANGO_DEBUG') == "True")
if not DEBUG:
    DEBUG_PROPAGATE_EXCPETIONS = True

# Types are CCF, STAFF, LOCAL/None/Anything else
#   CCF - main CCF application form
#   Staff - Staff portal where ccf app data can be viewed
#   ETC. - Combination of form app and staff portal for local development
APP_TYPE = os.environ.get('APP_TYPE', 'LOCAL')

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    # CCF
    'app_ccf',
    'staff',

    'admin_honeypot',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sites',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.postgres',
    'django.contrib.staticfiles',
    'django_filters',
    'rest_framework',
    'localflavor',
    # Two factor Auth will use Twilio,
    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'two_factor',
    # User Session Security
    'session_security',

    'widget_tweaks',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Always include for two-factor auth
    'django_otp.middleware.OTPMiddleware',
    # Include for twilio gateway
    'two_factor.middleware.threadlocals.ThreadLocals',
    # User Session Security
    'session_security.middleware.SessionSecurityMiddleware',
]

ROOT_URLCONF = 'ccf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'app_ccf/templates'),
            os.path.join(BASE_DIR, 'staff/templates'),
            os.path.join(BASE_DIR, 'shared/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ccf.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
#
# ATTENTION:
# For local development you will need a local postgres database to connect to.
# To set up a local postgres database follow the steps in the following link:
# https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-django-application-on-ubuntu-14-04
#
# If in glinux (google laptop), switch user to postgres for psql with:
# sudo -u postgres psql postgres
if os.environ.get('GAE_INSTANCE'):  # RDS deployment
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['SQL_DB_NAME'],
            'USER': os.environ['SQL_USERNAME'],
            'PASSWORD': os.environ['SQL_PASSWORD'],
            'HOST': os.environ['SQL_UNIX_HOSTNAME'],
            'PORT': os.environ['SQL_PORT'],
        },
    }
else:  # local deployment
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'myproject',
            'USER': 'myprojectuser',
            'PASSWORD': 'password',
            'HOST': 'localhost',
            'PORT': '',
        },
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = os.environ['GCS_STATIC_STORAGE']
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'

# For DDT
#INTERNAL_IPS = ['127.0.0.1',]
if DEBUG and not TESTING:
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': (lambda ignored: True),
    }
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware', ]
    INSTALLED_APPS += ['debug_toolbar', ]

SITE_APPS = [
    'app_ccf',
    'staff',
]

# for django.contrib.sites
SITE_ID = 1


# Path to store private files
UPLOAD_ROOT = 'private/'

LANGUAGES = [
    ('en', _('English')),
    ('es', _('Spanish')),
]

# SECURITY
CSRF_COOKIE_SECURE = os.environ['SECURE_COOKIE'] == 'True'
SESSION_COOKIE_SECURE = os.environ['SECURE_COOKIE'] == 'True'
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_HSTS_SECONDS = 60
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_PRELOAD = True
X_FRAME_OPTIONS = 'DENY'

# Auth views
LOGOUT_REDIRECT_URL = 'staff:index'

# Two factor
LOGIN_URL = 'two_factor:login'
LOGIN_REDIRECT_URL = 'staff:index'  # this one is optional

# Staff Session Security Timer
SESSION_SECURITY_WARN_AFTER = 230*60  # 3h50m - calculated in seconds
SESSION_SECURITY_EXPIRE_AFTER = 240*60  # 4 hours
# Allows session to continue after browser closes, not necessarily insecure.
# This was allowed because 2FA is enabled for login, and session expiration will
# still occur if left unattended, even if the browser is closed.
SESSION_SECURITY_INSECURE = True

# TWILIO
TWILIO_SMS_SENDER = os.environ.get('TWILIO_SMS_SENDER', '')
TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')

# Enable SMS 2FA usage of Twilio if all Twilio environment variables are set
if (TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN and TWILIO_SMS_SENDER):
    # 2FA: SMS Gateway settings
    TWO_FACTOR_SMS_GATEWAY = 'two_factor.gateways.twilio.gateway.Twilio'
    PHONENUMBER_DEFAULT_REGION = 'US'
    TWILIO_CALLER_ID = TWILIO_SMS_SENDER

# USPS Address verification
USPS_USER_ID = os.environ['USPS_USER_ID']
